Index: tests/test_neo4j_workers.py
===================================================================
diff --git a/tests/test_neo4j_workers.py b/tests/test_neo4j_workers.py
deleted file mode 100644
--- a/tests/test_neo4j_workers.py	(revision 18e9ee0553587f34448331ab0790fc9d7910171d)
+++ /dev/null	(revision 18e9ee0553587f34448331ab0790fc9d7910171d)
@@ -1,108 +0,0 @@
-from unittest.mock import Mock
-
-import pytest
-from PyQt5.QtCore import QThread
-from src.main import Neo4jQueryWorker, BaseNeo4jWorker, QueryWorker, WriteWorker, BatchWorker, Neo4jWorkerManager, DeleteWorker
-import pytest
-from PyQt5.QtCore import QThread, pyqtSignal
-from PyQt5.QtTest import QSignalSpy
-import time
-
-# This runs before each test
-@pytest.fixture
-def config():
-    # Create test configuration
-    return {
-        "uri": "bolt://localhost:7687",
-        "user": "neo4j",
-        "password": "neo4j"
-    }
-
-def test_delete_worker_initialization(config):
-    worker = DeleteWorker(config["uri"], (config["user"], config["password"]), Mock(), "test_node")
-    assert worker._uri == config["uri"]
-    assert worker._auth == (config["user"], config["password"])
-    assert worker.func is not None
-    assert worker.args == ("test_node",)
-
-def test_delete_worker_execute_operation(config):
-    worker = DeleteWorker(config["uri"], (config["user"], config["password"]), Mock(), "test_node")
-    worker.connect = Mock()
-    worker.cleanup = Mock()
-    worker.func = Mock()
-
-    worker.execute_operation()
-
-    worker.connect.assert_called_once()
-    worker.cleanup.assert_called_once()
-    worker.func.assert_called_once()
-
-def test_delete_worker_signals(config):
-    worker = DeleteWorker(config["uri"], (config["user"], config["password"]), Mock(), "test_node")
-    spy = QSignalSpy(worker.delete_finished)
-
-    worker.delete_finished.emit(True)
-
-    assert len(spy) == 1
-    assert spy[0] == [True]
-
-def test_query_worker_initialization(config):
-    worker = QueryWorker(config["uri"], (config["user"], config["password"]), "MATCH (n) RETURN n")
-    assert worker._uri == config["uri"]
-    assert worker._auth == (config["user"], config["password"])
-    assert worker.query == "MATCH (n) RETURN n"
-    assert worker.params == {}
-
-def test_query_worker_execute_operation(config):
-    worker = QueryWorker(config["uri"], (config["user"], config["password"]), "MATCH (n) RETURN n")
-    worker.connect = Mock()
-    worker.cleanup = Mock()
-    worker._driver = Mock()
-    worker._driver.session.return_value.__enter__.return_value.run.return_value = []
-
-    worker.execute_operation()
-
-    worker.connect.assert_called_once()
-    worker.cleanup.assert_called_once()
-    worker._driver.session.return_value.__enter__.return_value.run.assert_called_once_with("MATCH (n) RETURN n", {})
-
-def test_write_worker_initialization(config):
-    worker = WriteWorker(config["uri"], (config["user"], config["password"]), Mock(), "test_node")
-    assert worker._uri == config["uri"]
-    assert worker._auth == (config["user"], config["password"])
-    assert worker.func is not None
-    assert worker.args == ("test_node",)
-
-def test_write_worker_execute_operation(config):
-    worker = WriteWorker(config["uri"], (config["user"], config["password"]), Mock(), "test_node")
-    worker.connect = Mock()
-    worker.cleanup = Mock()
-    worker._driver = Mock()
-    worker._driver.session.return_value.__enter__.return_value.execute_write = Mock()
-
-    worker.execute_operation()
-
-    worker.connect.assert_called_once()
-    worker.cleanup.assert_called_once()
-    worker._driver.session.return_value.__enter__.return_value.execute_write.assert_called_once()
-
-def test_batch_worker_initialization(config):
-    operations = [("MATCH (n) RETURN n", {})]
-    worker = BatchWorker(config["uri"], (config["user"], config["password"]), operations)
-    assert worker._uri == config["uri"]
-    assert worker._auth == (config["user"], config["password"])
-    assert worker.operations == operations
-
-def test_batch_worker_execute_operation(config):
-    operations = [("MATCH (n) RETURN n", {})]
-    worker = BatchWorker(config["uri"], (config["user"], config["password"]), operations)
-    worker.connect = Mock()
-    worker.cleanup = Mock()
-    worker._driver = Mock()
-    worker._driver.session.return_value.__enter__.return_value.run.return_value = []
-
-    worker.execute_operation()
-
-    worker.connect.assert_called_once()
-    worker.cleanup.assert_called_once()
-    worker._driver.session.return_value.__enter__.return_value.run.assert_called_once_with("MATCH (n) RETURN n", {})
Index: tests/test_worldbuilding_ui.py
===================================================================
diff --git a/tests/test_worldbuilding_ui.py b/tests/test_worldbuilding_ui.py
deleted file mode 100644
--- a/tests/test_worldbuilding_ui.py	(revision 18e9ee0553587f34448331ab0790fc9d7910171d)
+++ /dev/null	(revision 18e9ee0553587f34448331ab0790fc9d7910171d)
@@ -1,71 +0,0 @@
-import pytest
-from unittest.mock import Mock
-from PyQt6.QtWidgets import QApplication, QLineEdit, QTableWidgetItem, QComboBox
-from src.main import WorldBuildingUI, WorldBuildingController
-
-@pytest.fixture
-def app():
-    return QApplication([])
-
-@pytest.fixture
-def controller():
-    return Mock(spec=WorldBuildingController)
-
-@pytest.fixture
-def ui(controller):
-    return WorldBuildingUI(controller)
-
-def test_worldbuilding_ui_initialization(ui):
-    assert ui.controller is not None
-    assert ui.name_input is not None
-    assert ui.description_input is not None
-    assert ui.labels_input is not None
-    assert ui.tags_input is not None
-    assert ui.properties_table is not None
-    assert ui.relationships_table is not None
-    assert ui.image_label is not None
-
-def test_worldbuilding_ui_clear_all_fields(ui):
-    ui.name_input.setText("Test Name")
-    ui.description_input.setPlainText("Test Description")
-    ui.labels_input.setText("Label1, Label2")
-    ui.tags_input.setText("Tag1, Tag2")
-    ui.properties_table.setRowCount(1)
-    ui.relationships_table.setRowCount(1)
-    ui.image_label.setText("Test Image")
-
-    ui.clear_all_fields()
-
-    assert ui.name_input.text() == "Test Name"  # Name should not be cleared
-    assert ui.description_input.toPlainText() == ""
-    assert ui.labels_input.text() == ""
-    assert ui.tags_input.text() == ""
-    assert ui.properties_table.rowCount() == 0
-    assert ui.relationships_table.rowCount() == 0
-    assert ui.image_label.text() == ""
-
-def test_worldbuilding_ui_set_image(ui):
-    ui.set_image("src/test_image.png")
-    assert ui.image_label.pixmap() is not None
-
-    ui.set_image(None)
-    assert ui.image_label.pixmap() is None
-
-def test_worldbuilding_ui_add_relationship_row(ui):
-    initial_row_count = ui.relationships_table.rowCount()
-    ui.add_relationship_row("TestType", "TestTarget", ">", "{}")
-
-    assert ui.relationships_table.rowCount() == initial_row_count + 1
-    assert ui.relationships_table.item(initial_row_count, 0).text() == "TestType"
-    assert isinstance(ui.relationships_table.cellWidget(initial_row_count, 1), QLineEdit)
-    assert ui.relationships_table.cellWidget(initial_row_count, 1).text() == "TestTarget"
-    assert isinstance(ui.relationships_table.cellWidget(initial_row_count, 2), QComboBox)
-    assert ui.relationships_table.cellWidget(initial_row_count, 2).currentText() == ">"
-    assert ui.relationships_table.item(initial_row_count, 3).text() == "{}"
-
-def test_worldbuilding_ui_add_property_row(ui):
-    initial_row_count = ui.properties_table.rowCount()
-    ui.add_property_row()
-
-    assert ui.properties_table.rowCount() == initial_row_count + 1
-    assert ui.properties_table.cellWidget(initial_row_count, 2) is not None
Index: tests/test_worldbuilding_controller.py
===================================================================
diff --git a/tests/test_worldbuilding_controller.py b/tests/test_worldbuilding_controller.py
deleted file mode 100644
--- a/tests/test_worldbuilding_controller.py	(revision 18e9ee0553587f34448331ab0790fc9d7910171d)
+++ /dev/null	(revision 18e9ee0553587f34448331ab0790fc9d7910171d)
@@ -1,77 +0,0 @@
-import pytest
-from unittest.mock import Mock, patch
-from PyQt6.QtCore import QTimer, QStringListModel
-from src.main import WorldBuildingController, WorldBuildingUI, Neo4jModel, Config
-
-@pytest.fixture
-def config():
-    return Config("src/config.json")
-
-@pytest.fixture
-def model(config):
-    return Neo4jModel(config.NEO4J_URI, config.NEO4J_USERNAME, config.NEO4J_PASSWORD)
-
-@pytest.fixture
-def ui():
-    return Mock(spec=WorldBuildingUI)
-
-@pytest.fixture
-def controller(ui, model, config):
-    return WorldBuildingController(ui, model, config)
-
-def test_worldbuilding_controller_initialization(controller):
-    assert controller.ui is not None
-    assert controller.model is not None
-    assert controller.config is not None
-
-def test_worldbuilding_controller_load_node_data(controller):
-    with patch.object(controller.model, 'load_node', return_value=Mock()) as mock_load_node:
-        controller.ui.name_input.text.return_value = "Test Node"
-        controller.load_node_data()
-        mock_load_node.assert_called_once_with("Test Node", controller._handle_node_data)
-
-def test_worldbuilding_controller_save_node(controller):
-    with patch.object(controller.model, 'save_node', return_value=Mock()) as mock_save_node:
-        controller.ui.name_input.text.return_value = "Test Node"
-        controller.ui.description_input.toPlainText.return_value = "Test Description"
-        controller.ui.labels_input.text.return_value = "Label1, Label2"
-        controller.ui.tags_input.text.return_value = "Tag1, Tag2"
-        controller.ui.properties_table.rowCount.return_value = 0
-        controller.ui.relationships_table.rowCount.return_value = 0
-        controller.save_node()
-        mock_save_node.assert_called_once()
-
-def test_worldbuilding_controller_delete_node(controller):
-    with patch.object(controller.model, 'delete_node', return_value=Mock()) as mock_delete_node:
-        controller.ui.name_input.text.return_value = "Test Node"
-        with patch('PyQt6.QtWidgets.QMessageBox.question', return_value=QMessageBox.Yes):
-            controller.delete_node()
-            mock_delete_node.assert_called_once_with("Test Node", controller._handle_delete_success)
-
-def test_worldbuilding_controller_depth_zero(controller):
-    with patch.object(controller.model, 'get_node_relationships', return_value=Mock()) as mock_get_node_relationships:
-        controller.ui.name_input.text.return_value = "Test Node"
-        controller.ui.depth_spinbox.value.return_value = 0
-        controller.update_relationship_tree("Test Node")
-        mock_get_node_relationships.assert_called_once_with("Test Node", 0, controller._populate_relationship_tree)
-
-def test_worldbuilding_controller_depth_one(controller):
-    with patch.object(controller.model, 'get_node_relationships', return_value=Mock()) as mock_get_node_relationships:
-        controller.ui.name_input.text.return_value = "Test Node"
-        controller.ui.depth_spinbox.value.return_value = 1
-        controller.update_relationship_tree("Test Node")
-        mock_get_node_relationships.assert_called_once_with("Test Node", 1, controller._populate_relationship_tree)
-
-def test_worldbuilding_controller_depth_two(controller):
-    with patch.object(controller.model, 'get_node_relationships', return_value=Mock()) as mock_get_node_relationships:
-        controller.ui.name_input.text.return_value = "Test Node"
-        controller.ui.depth_spinbox.value.return_value = 2
-        controller.update_relationship_tree("Test Node")
-        mock_get_node_relationships.assert_called_once_with("Test Node", 2, controller._populate_relationship_tree)
-
-def test_worldbuilding_controller_depth_three(controller):
-    with patch.object(controller.model, 'get_node_relationships', return_value=Mock()) as mock_get_node_relationships:
-        controller.ui.name_input.text.return_value = "Test Node"
-        controller.ui.depth_spinbox.value.return_value = 3
-        controller.update_relationship_tree("Test Node")
-        mock_get_node_relationships.assert_called_once_with("Test Node", 3, controller._populate_relationship_tree)
